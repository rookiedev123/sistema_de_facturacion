<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2Q==
</value>
  </data>
</root>